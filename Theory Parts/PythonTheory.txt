1. Introduction To python:
*Python is a high-level, easy-to-learn, interpreted programming language used for web apps, automation, AI, etc.


2. History:
*Python was created in the late 1980s by Guido van Rossum.


3. Features:
* Easy to learn and use
* High-level language
* Interpreted language
* Object-oriented
* Large standard library
* Cross-platform
* Open Source


4. Advantages and Disadvantages:
* Advantages: 
    1. Easy to learn. 
    2. fast development.
    3. large community.
    4. cross-platform.
* Disadvantages: 
    1. low performance
    2. limited multithreading support.


5 .Applications of Python:
* Web development (e.g., Django, Flask)
* Data analysis and science (e.g., NumPy, pandas, Matplotlib)
* Automation (e.g., scripting, data scraping)
* Artificial intelligence and machine learning (e.g., TensorFlow, Keras)
* Scientific computing (e.g., NumPy, SciPy, Pandas)
* Gaming (e.g., Pygame, Pyglet)


---------------------------------------------------------------------------------------------------------------------------------


6. Library Functions:
*   `print()`: prints output to the screen
*   `input()`: gets user input
*   `len()`: returns the length of a string or list
*   `range()`: generates a sequence of numbers
*   `list()`: creates a list from a sequence
*   `tuple()`: creates a tuple from a sequence
*   `dict()`: creates a dictionary from a sequence of key-value pairs
*   `set()`: creates a set from a sequence of unique elements
*   `str()`: converts a value to a string
*   `int()`: converts a value to an integer
*   `float()`: converts a value to a floating-point number
*   `bool()`: converts a value to a boolean value
etc.


7. Keywords:
*Keywords are reserved words in Python that have special meanings. 
*Cannot be used as variable names or Function name.
*Some common keywords include:
    1. if
    2. else
    3. for
    4. while
    5. def
    6. class
    7. try
    8. except
    9. finally
    10. with


8. variables:
*In8010782571 Python, a variable is a name given to a value. The value can be a number, a string, a list, a dictionary, etc.
*Variables are used to store and manipulate data in a program.
*So, There are Single and Multiple variables in python.
*Single variable is used to store one value at a time. Example, x = 5
*Multiple variables are used to store multiple values at a time. Example, x, y, z = 5, 10, 15


9. Data Types:
*Datatypes means the type of data that a variable can hold.
*In Python, different types of data are stored differently.
*There are Two Types of Datatypes : Sngle Value and Multi/Collection DataTypes.
*So, In Single Values:
    1. int
    2. decimal
    3. complex
    4. boolean(True/False)
*AND, In Multi/Collection Values:
    1. str
    2. list
    3. tuple
    4. set
    5. dict


10. Slicing:
*Slicing means cutting parts of a string, list or tuple.
*It is use to select the a range of a items.
*Syntax:
    data[start:end]
    - start: Starting index (included)
    - end: Ending index (excluded)
*Example:
    text = "Python"
    print(text[0:2]) # Output: 'Py' (From index 0 to 1)
    print(text[2:5]) # Output: 'tho' (From index 2,3,4)
    print(text[-1]) # Output: 'n' (Last Character)


11. Typecasting:
*Typecasting means converting one Datatype into another.
* Example: converts string to int, float to int, etc.
    1. x = "100"
       y = int(x)          # Now y is interger 100

    2. a = 5
       b = str(a)          # Now b is string '5'

    3. c = 3.7
       d = int(c)          # Now d is integer 3 (decimal part removed)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12. Operators:
*Operators are used to perform operations on variables and values.
*There are seven types of operators:
    1. Arithmetic Operators.
    2. Comparison Operators.
    3. Assignment Operators.
    4. Logical Operators.
    5. Membership Operators.
    6. Identity Operators.
    7. Bitwise Operators.

        1. Arithmetic Operators:
        * Definition: Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication, division, modulus, exponentiation, etc.
        * Example:
            a = 10
            b = 5
            print(a + b) # Output: 15 (Addition)
            print(a - b) # Output: 5 (Subtraction)
            print(a * b) # Output: 50 (Multiplication)
            print(a / b) # Output: 2.0 (Division)
            print(a % b) # Output: 0 (Modulus)
            print(a ** b) # Output: 100000 (Exponentiation)

        2. Comparison Operators:
        * Definition: Comparison operators are used to compare the values of two variables.
        * Example:
            a = 10
            b = 5
            print(a == b) # Output: False (Not Equal)
            print(a != b) # Output: True (Equal)
            print(a > b) # Output: True (Greater than)
            print(a < b) # Output: False (Less than)
            print(a >= b) # Output: True (Greater than or Equal to)
            print(a <= b) # Output: False (Less than or Equal to)

        3. Assignment Operators:
        * Definition: Assignment operators are used to assign a value to a variable.
        * Example:
            a = 10
            b = a
            print(b) # Output: 10
            print(a) # Output: 10
            print(a += 5) # Output: 15 (Addition Assignment)
            print(a -= 5) # Output: 10 (Subtraction Assignment)
            print(a *= 5) # Output: 50 (Multiplication Assignment)
            print(a /= 5) # Output: 10.0 (Division Assignment)
            print(a %= 5) # Output: 0 (Modulus Assignment)
            print(a **= 5) # Output: 100000 (Exponentiation Assignment)

        4. Logical Operators:
        * Definition: Logical operators are used to perform logical operations like AND, OR, NOT, etc.
        * Example:
            a = True
            b = False
            print(a and b) # Output: False (AND)
            print(a or b) # Output: True (OR)
            print(not a) # Output: False (NOT)

        5. Membership Operators:
        * Definition: Membership operators are used to check if a value is present in a sequence or not.
        * Example:
            a = [1, 2, 3, 4, 5]
            print(1 in a) # Output: True (In)
            print(6 in a) # Output: False (Not In)

        6. Identity Operators:
        * Definition: Identity operators are used to check if two variables are the same object or not.
        * Example:
            a = [1, 2, 3]
            b = [1, 2, 3]
            print(a is b) # Output: False (Not the same object)
            print(a is not b) # Output: True (Not the same object)

        7. Bitwise Operators:
        * Definition: Bitwise operators are used to perform operations on bits.
        * Example:
            a = 5 # Binary: 101
            b = 3 # Binary: 011
            print(a & b) # Output: 1 (Binary: 001) (Bitwise AND)
            print(a | b) # Output: 7 (Binary: 111) (Bitwise OR)
            print(a ^ b) # Output: 6 (Binary: 110) (Bitwise XOR)
            print(~a) # Output: -6 (Binary: 111111111111111111111)
            print(a << 1) # Output: 10 (Binary: 1010) (Left Shift)
            print(a >> 1) # Output: 2 (Binary: 10) (Right Shift)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13. Control Statement:
* Definition: Control statements are used to control the flow of a program.
* Types:
    1. Conditional Statements:
        a. if Statement.
        b. elif Statement.
        c. else Statement.
    2. Loops:
        a. for Loop.
        b. while Loop.
    3. Loop Control Statements:
        a. break Statement.
        b. continue Statement.
        c. pass Statement.

    1. Conditional Statements:
    * Definition: Conditional statements are used to execute a block of code if a certain condition is met.
        * Synatx:
            if condition:
                # code
            elif another_condition:
                # code
            else:
                # code

    2. Loops:
    * Definition: Loops are used to execute a block of code repeatedly for a specified number of times.
        * Synatx;
            1. for Loop:
                for i in range(1,5):
                    print(i) # Output: 1, 2, 3, 4
            
            2. while Loop:
                while condition:
                    # code

    3. Loop Control Statements:
    * Definition: Loop control statements are used to control the flow of a loop.
        1. break Statement:
            - Definition: The break statement is used to terminate or exits a loop.

        2. continue Statement:
            - Definition: The continue statement is used to skip the current iteration of a loop.

        3. pass Statement:
            - Definition: The pass statement is used as a placeholder when a statement is required syntactically but no execution of code is necessary.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


14. Functions:
* Definition: 
    - Functions are reusable blocks of code that can be called multiple times from different parts of a program.
    - A Function is a group of related statements that performs a specific task.

* Types  of Functions:
    - Built - in Functions.
    - User - defined Functions.

    1. Built - in Functions:
    - Definition: Built-in functions are functions that are already available in Python and can be used directly.
    - Examples: print(), len(), max(), min(), etc.
    - Syntax: 
        function_name(parameters)
            # body of the function
            return value

    2. User - defined Functions:
    - Definition: User-defined functions are functions that are created by the user.
    - Why use user-defined functions?
        - To avoid code duplication.
        - To make the code more readable and maintainable.
        - To make the code more efficient.
        - Easy to debugging.
        - Better program structure.
    - Syntax:
        def function_name(parameters):
            # body of the function
            return value
        function_name() # calling the function
    - Example:
        def add(a, b):
            result = a + b
            return result
        print(add(5, 7)) # Output : 12

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

z